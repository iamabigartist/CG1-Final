#define PI32 5.5683278
#define PI 3.1415926

int particleCount;
float dt;
float3 gravity;
float particleMass;
float h;
float d0;
float delta;
float u;
int iterations;
int neighbourCount;

float W(float3 v) {
    float r = length(v);
    if (r < 0.0001 || r > 2.0 * h) return 0.0;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    return alpha * pow(1.0 - q * 0.5, 8.0) * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0);
}

float3 GradW(float3 v) {
    float r = length(v);
    float3 ret = {0.0, 0.0, 0.0};
    if (r < 0.0001 || r > 2.0 * h) return ret;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    float temp = 1.0 - 0.5 * q;
    float temp7 = pow(temp, 7.0);
    float n = ((12.0 * q + 12.5 + 4.0 / q) * temp7 * temp - 4.0 / q * temp7 * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0)) / h2;
    return n * v * alpha;
}

float3 GradW(float3 v, float m_h) {
    float r = length(v);
    float3 ret = { 0.0, 0.0, 0.0 };
    if (r < 0.0001 || r > 2.0 * h) return ret;
    float q = r / m_h;
    float q2 = q * q;
    float h2 = m_h * m_h;
    float alpha = 1365.0 / (512.0 * PI * h2 * m_h);
    float temp = 1.0 - 0.5 * q;
    float temp7 = pow(temp, 7.0);
    float n = ((12.0 * q + 12.5 + 4.0 / q) * temp7 * temp - 4.0 / q * temp7 * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0)) / h2;
    return n * v * alpha;
}


RWStructuredBuffer<float3> position;
RWStructuredBuffer<float3> velocity;
RWStructuredBuffer<float3> prePosition;
RWStructuredBuffer<float3> preVelocity;
RWStructuredBuffer<float3> Aext;
RWStructuredBuffer<float3> Ap;
RWStructuredBuffer<float> p;
RWStructuredBuffer<float> d;
StructuredBuffer<int> neighbours;

#pragma kernel Initialize
[numthreads(8,1,1)]
void Initialize(uint3 id : SV_DispatchThreadID)
{
    float3 temp = {0.0, 0.0, 0.0};
    for (int i = 0; i < neighbourCount; i++) {
        int neighbour = neighbours[neighbourCount * id.x + i];
        float3 grad = GradW(position[id.x] - position[neighbour], h);
        temp += dot(grad, grad) * (velocity[neighbour] - velocity[id.x]) / d[neighbour];
    }
    Aext[id.x] = u * temp + gravity;
    p[id.x] = 0.0;
    Ap[id.x] = float3(0.0, 0.0, 0.0);
}

#pragma kernel Predict
[numthreads(8,1,1)]
void Predict(uint3 id : SV_DispatchThreadID)
{
    preVelocity[id.x] = velocity[id.x] + (Aext[id.x] + Ap[id.x]) * dt;
    prePosition[id.x] = position[id.x] + preVelocity[id.x] * dt;
}

#pragma kernel Correct
[numthreads(8,1,1)]
void Correct(uint3 id : SV_DispatchThreadID)
{
    float density = 0.0001;
    for (int i = 0; i < neighbourCount; i++) {
        density += W(prePosition[id.x] - prePosition[neighbours[neighbourCount * id.x + i]]);
    }
    density *= particleMass;
    p[id.x] += delta * (density - d0);
    d[id.x] = density;
}

#pragma kernel Force
[numthreads(8,1,1)]
void Force(uint3 id : SV_DispatchThreadID)
{
    float3 accP = {0.0, 0.0, 0.0};
    float self = p[id.x] / (d[id.x] * d[id.x]);
    for (int i = 0; i < neighbourCount; i++) {
        int neighbour = neighbours[neighbourCount * id.x + i];
        accP += (self + p[neighbour] / (d[neighbour] * d[neighbour])) * GradW(prePosition[id.x] - prePosition[neighbour]);
    }
    Ap[id.x] = -particleMass * accP;
}

#pragma kernel Finalize
[numthreads(8,1,1)]
void Finalize(uint3 id : SV_DispatchThreadID)
{
    velocity[id.x] += (Aext[id.x] + Ap[id.x]) * dt;
    position[id.x] += velocity[id.x] * dt;
}