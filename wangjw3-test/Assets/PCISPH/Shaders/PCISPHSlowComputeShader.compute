// Each #kernel tells which function to compile; you can have many kernels
#define PI32 5.5683278
#define PI 3.1415926

int particleCount;
float dt;
float3 gravity;
float particleMass;
float h;
float d0;
float delta;
float u;
int iterations;

float W(float3 v) {
    float r = length(v);
    if (r < 0.0001 || r > 2.0 * h) return 0.0;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    return alpha * pow(1.0 - q * 0.5, 8.0) * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0);
}

float3 GradW(float3 v) {
    float r = length(v);
    float3 ret = {0.0, 0.0, 0.0};
    if (r < 0.0001 || r > 2.0 * h) return ret;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    float temp = 1.0 - 0.5 * q;
    float temp7 = pow(temp, 7.0);
    float n = ((12.0 * q + 12.5 + 4.0 / q) * temp7 * temp - 4.0 / q * temp7 * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0)) / h2;
    return n * v * alpha;
}

globallycoherent RWStructuredBuffer<float3> position;
globallycoherent RWStructuredBuffer<float3> velocity;
globallycoherent RWStructuredBuffer<float3> prePosition;
globallycoherent RWStructuredBuffer<float3> preVelocity;
globallycoherent RWStructuredBuffer<float3> Aext;
globallycoherent RWStructuredBuffer<float3> Ap;
globallycoherent RWStructuredBuffer<float> p;
globallycoherent RWStructuredBuffer<float> d;

#pragma kernel Step
[numthreads(8,1,1)]
void Step(uint3 id : SV_DispatchThreadID)
{
    float3 temp = {0.0, 0.0, 0.0};
    for (int i = 0; i < particleCount; i++) {
        temp += pow(GradW(position[id.x] - position[i]), 2) * (velocity[i] - velocity[id.x]) / (d[i] + 0.0001);
    }
    Aext[id.x] = u * temp + gravity;
    p[id.x] = 0.0;
    Ap[id.x] = float3(0.0, 0.0, 0.0);

    AllMemoryBarrierWithGroupSync();

    for (int it = 0; it < iterations; it++) {
        preVelocity[id.x] = velocity[id.x] + (Aext[id.x] + Ap[id.x]) * dt;
        prePosition[id.x] = position[id.x] + preVelocity[id.x] * dt;

        AllMemoryBarrierWithGroupSync();

        float density = 0.0001;
        for (int i = 0; i < particleCount;i++) {
            density += W(prePosition[id.x] - prePosition[i]);
        }
        density *= particleMass;
        p[id.x] += delta * (density - d0);
        d[id.x] = density;

        AllMemoryBarrierWithGroupSync();

        float3 accP = {0.0, 0.0, 0.0};
        float self = p[id.x] / (d[id.x] * d[id.x]);
        for (int i = 0; i < particleCount; i++) {
            accP += (self + p[i] / (d[i] * d[i])) * GradW(position[id.x] - position[i]);
        }
        Ap[id.x] = -particleMass * accP;

        AllMemoryBarrierWithGroupSync();
    }

    velocity[id.x] += (Aext[id.x] + Ap[id.x]) * dt;
    position[id.x] += velocity[id.x] * dt;
}