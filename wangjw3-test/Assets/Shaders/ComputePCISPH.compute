// Each #kernel tells which function to compile; you can have many kernels
#define MAX_NEIGHBOUR 256
#define PI32 5.5683278
#define PI 3.1415926
struct Particle {
    float3 position;
    float3 prePosition;
    float3 velocity;
    float3 preVelocity;
    float3 Aext;
    float3 Ap;
    float p;
    float d;
    int neighbourCount;
};

float W(float3 v, float h) {
    float r = length(v);
    if (r < 0.0001 || r > 2.0 * h) return 0.0;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    return alpha * pow(1.0 - q * 0.5, 8.0) * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0);
}

float3 GradW(float3 v, float h) {
    float r = length(v);
    float3 ret = {0.0, 0.0, 0.0};
    if (r < 0.0001 || r > 2.0 * h) return ret;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    float temp = 1.0 - 0.5 * q;
    float temp7 = pow(temp, 7.0);
    float n = ((12.0 * q + 12.5 + 4.0 / q) * temp7 * temp - 4.0 / q * temp7 * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0)) / h2;
    return n * v * alpha;
}

float dt;
float3 gravity;
float particleMass;
float h;
float d0;
float delta;

RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<int> neighbours;

#pragma kernel Initialize
[numthreads(8,1,1)]
void Initialize (uint3 id : SV_DispatchThreadID)
{
    particles[id.x].Aext = gravity;
    particles[id.x].p = 0.0;
    particles[id.x].Ap = float3(0.0, 0.0, 0.0);
}

#pragma kernel Predict
[numthreads(8, 1, 1)]
void Predict(uint3 id : SV_DispatchThreadID) 
{
    particles[id.x].preVelocity = particles[id.x].velocity + (particles[id.x].Aext + particles[id.x].Ap) * dt;
    particles[id.x].prePosition = particles[id.x].position + particles[id.x].preVelocity * dt;
}

#pragma kernel Correct
[numthreads(8, 1, 1)]
void Correct(uint3 id : SV_DispatchThreadID)
{
    float preDensity = 0.0;
    //float3 sumGrad = {0.0, 0.0, 0.0};
    //float sumDot = 0;
    //float3 grad;
    float3 v;
    for (int i = 0; i < particles[id.x].neighbourCount; i++) {
        v = particles[id.x].prePosition - particles[neighbours[MAX_NEIGHBOUR * id.x + i]].prePosition;
        preDensity += W(v, h);
        //grad = GradW(particles[neighbours[MAX_NEIGHBOUR * id.x + i]].position - particles[id.x].position, h);
        //sumGrad += grad;
        //sumDot += dot(grad, grad);
    }
    preDensity *= particleMass;
    float derr = preDensity - d0;
    //float beta = dt * dt * particleMass * particleMass * 2.0 / (d0 * d0);
    //float delta = -1.0 / (beta * (-dot(sumGrad, sumGrad) - sumDot));
    particles[id.x].p += delta * derr;
    particles[id.x].d = preDensity;

    //particles[id.x].Ap = -particleMass * 2.0 * particles[id.x].p / (d0 * d0) * sumGrad;
    // particles[id.x].Ap.x = beta;
    // particles[id.x].Ap.y = delta;
    // particles[id.x].Ap.z = preDensity;
}

#pragma kernel Force
[numthreads(8, 1, 1)]
void Force(uint3 id : SV_DispatchThreadID)
{
    float3 accP = {0.0, 0.0, 0.0};
    Particle self = particles[id.x];
    for (int i = 0; i < particles[id.x].neighbourCount; i++) {
        Particle neighbour = particles[neighbours[MAX_NEIGHBOUR * id.x + i]];
        accP += (self.p / (self.d * self.d) + neighbour.p / (neighbour.d * neighbour.d)) * GradW(self.position - neighbour.position, h);
    }
    particles[id.x].Ap = -particleMass * accP;
}

#pragma kernel Finalize
[numthreads(8, 1, 1)]
void Finalize(uint3 id : SV_DispatchThreadID)
{
    particles[id.x].velocity += (particles[id.x].Aext + particles[id.x].Ap) * dt;
    particles[id.x].position += particles[id.x].velocity * dt;
}