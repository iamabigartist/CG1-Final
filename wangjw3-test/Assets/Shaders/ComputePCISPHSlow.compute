// Each #kernel tells which function to compile; you can have many kernels
#define PI32 5.5683278
#define PI 3.1415926
struct Particle {
    float3 position;
    float3 prePosition;
    float3 velocity;
    float3 preVelocity;
    float3 Aext;
    float3 Ap;
    float p;
    float d;
};

// float W(float3 v, float h) {
//     float r = length(v);
//     float mul = r < 0.0001 ? 0.0 : 1.0;
//     mul = r > h ? 0.0 : mul;
//     float r2 = r * r;
//     float h2 = h * h;
//     return 1.0 / (h2 * h * PI32) * (2.5 - r2) * exp(-r2 / h2) * mul;
// }

// float3 GradW(float3 v, float h) {
//     float r = length(v);
//     float mul = r < 0.0001 ? 0.0 : 1.0;
//     mul = r > h ? 0.0 : mul;
//     float r2 = r * r;
//     float h2 = h * h;
//     float n = -2.0 * exp(-r2 / h2) / (h2 * h * PI32) * ((2.5 - r2) / h2 + 1.0);
//     return n * v * mul;
// }

// float W(float3 v, float h) {
//     float r = length(v);
//     float mul = r < 0.0001 ? 0.0 : 1.0;
//     mul = r > 3 * h ? 0.0 : mul;
//     float r2 = r * r;
//     float h2 = h * h;
//     return 1.0 / (PI32 * h2 * h) * exp(-r2 / h2) * mul;
// }

// float3 GradW(float3 v, float h) {
//     float r = length(v);
//     float mul = r < 0.0001 ? 0.0 : 1.0;
//     mul = r > 3 * h ? 0.0 : mul;
//     float r2 = r * r;
//     float h2 = h * h;
//     float n = -2.0 * exp(-r2 / h2) / (PI32 * h2 * h2 * h);
//     return n * v * mul;
// }



float W(float3 v, float h) {
    float r = length(v);
    if (r < 0.0001 || r > 2.0 * h) return 0.0;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    return alpha * pow(1.0 - q * 0.5, 8.0) * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0);
}

float3 GradW(float3 v, float h) {
    float r = length(v);
    float3 ret = {0.0, 0.0, 0.0};
    if (r < 0.0001 || r > 2.0 * h) return ret;
    float q = r / h;
    float q2 = q * q;
    float h2 = h * h;
    float alpha = 1365.0 / (512.0 * PI * h2 * h);
    float temp = 1.0 - 0.5 * q;
    temp = temp > 0 ? temp : 0;
    float temp7 = pow(temp, 7.0);
    float n = ((12.0 * q + 12.5 + 4.0 / q) * temp7 * temp - 4.0 / q * temp7 * (4.0 * q2 * q + 6.25 * q2 + 4.0 * q + 1.0)) / h2;
    return n * v * alpha;
}

float3 calculateForceAcc(float3 v, float3 f_normal, float f_stength){
    float3 d = normalize(v);
    float3 n = normalize(f_normal);
    float r = length(v);
    float len = dot(d, n) * r;
    if(len <= 0 )    return float3(0.0, 0.0, 0.0);
    float a = f_stength / (len * len + 0.0001);
    a = (a > f_stength) ? f_stength : a;
    return a * n;
}


int particleCount;
float dt;
float3 gravity;
float particleMass;
float h;
float d0;
float delta;
float u;
float3 force1Position;
float3 forcePlain1Normal;
float force1Strength;
float3 force2Position;
float3 forcePlain2Normal;
float force2Strength;
int iterations;

globallycoherent RWStructuredBuffer<Particle> particles;

#pragma kernel Step
[numthreads(8,1,1)]
void Step(uint3 id : SV_DispatchThreadID)
{
    Particle self = particles[id.x];
    float3 temp = {0.0, 0.0, 0.0};
    for (int i = 0; i < particleCount; i++) {
        Particle neighbour = particles[i];
        float3 grad = GradW(self.position - neighbour.position, h);
        temp += dot(grad, grad) * (neighbour.velocity - self.velocity) / (neighbour.d + 0.0001);
    }
    particles[id.x].Aext = u * temp + gravity;
    particles[id.x].p = 0.0;
    particles[id.x].Ap = float3(0.0, 0.0, 0.0);

    AllMemoryBarrierWithGroupSync();

    for (int it = 0; it < iterations; it++) {
        particles[id.x].preVelocity = particles[id.x].velocity + (particles[id.x].Aext + particles[id.x].Ap) * dt;
        particles[id.x].prePosition = particles[id.x].position + particles[id.x].preVelocity * dt;

        AllMemoryBarrierWithGroupSync();

        float preDensity = 0.00001;
        float3 v;
        for (int i = 0; i < particleCount; i++) {
            v = particles[id.x].prePosition - particles[i].prePosition;
            preDensity += W(v, h);
        }
        preDensity *= particleMass;
        float derr = preDensity - d0;
        particles[id.x].p += delta * derr;
        particles[id.x].d = preDensity;
        
        AllMemoryBarrierWithGroupSync();
        
        float3 accP = {0.0, 0.0, 0.0};
        self = particles[id.x];
        for (i = 0; i < particleCount; i++) {
            Particle neighbour = particles[i];
            
            accP += (self.p / (self.d * self.d) + neighbour.p / (neighbour.d * neighbour.d)) * GradW(self.prePosition - neighbour.prePosition, h);
        }
        particles[id.x].Ap = -particleMass * accP;

        AllMemoryBarrierWithGroupSync();
    }

    particles[id.x].velocity += (particles[id.x].Aext + particles[id.x].Ap) * dt;
    particles[id.x].position += particles[id.x].velocity * dt;
}



#pragma kernel SetInitialVelocity
[numthreads(8,1,1)]
void SetInitialVelocity (uint3 id : SV_DispatchThreadID)
{
    float3 a1 = calculateForceAcc(particles[id.x].position - force1Position, forcePlain1Normal, force1Strength);
    float3 a2 = calculateForceAcc(particles[id.x].position - force2Position, forcePlain2Normal, force2Strength);
    particles[id.x].velocity = (a1 + a2) * dt;
}

#pragma kernel Initialize
[numthreads(8,1,1)]
void Initialize (uint3 id : SV_DispatchThreadID)
{
    Particle self = particles[id.x];
    float3 temp = {0.0, 0.0, 0.0};
    for (int i = 0; i < particleCount; i++) {
        Particle neighbour = particles[i];
        temp += pow(GradW(self.position - neighbour.position, h), 2) * (neighbour.velocity - self.velocity) / (neighbour.d + 0.0001);
    }

    particles[id.x].Aext = u * temp + gravity;
    particles[id.x].p = 0.0;
    particles[id.x].Ap = float3(0.0, 0.0, 0.0);
}

#pragma kernel Predict
[numthreads(8, 1, 1)]
void Predict(uint3 id : SV_DispatchThreadID) 
{
    particles[id.x].preVelocity = particles[id.x].velocity + (particles[id.x].Aext + particles[id.x].Ap) * dt;
    particles[id.x].prePosition = particles[id.x].position + particles[id.x].preVelocity * dt;
}

#pragma kernel Correct
[numthreads(8, 1, 1)]
void Correct(uint3 id : SV_DispatchThreadID)
{
    float preDensity = 0.00001;
    float3 v;
    for (int i = 0; i < particleCount; i++) {
        v = particles[id.x].prePosition - particles[i].prePosition;
        preDensity += W(v, h);
    }
    preDensity *= particleMass;
    float derr = preDensity - d0;
    particles[id.x].p += delta * derr;
    particles[id.x].d = preDensity;
}

#pragma kernel Force
[numthreads(8, 1, 1)]
void Force(uint3 id : SV_DispatchThreadID)
{
    float3 accP = {0.0, 0.0, 0.0};
    Particle self = particles[id.x];
    for (int i = 0; i < particleCount; i++) {
        Particle neighbour = particles[i];
        
        accP += (self.p / (self.d * self.d) + neighbour.p / (neighbour.d * neighbour.d)) * GradW(self.prePosition - neighbour.prePosition, h);
    }
    particles[id.x].Ap = -particleMass * accP;
}

#pragma kernel Finalize
[numthreads(8, 1, 1)]
void Finalize(uint3 id : SV_DispatchThreadID)
{
    particles[id.x].velocity += (particles[id.x].Aext + particles[id.x].Ap) * dt;
    particles[id.x].position += particles[id.x].velocity * dt;
}